version: '3.8'

services:
  development:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
      - poetry-cache:/tmp/poetry_cache
      - node-modules:/workspace/node_modules
    environment:
      - POETRY_VENV_IN_PROJECT=true
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      - PYTHONPATH=/workspace/src
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/llm_metrics
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - prometheus
      - grafana
    command: sleep infinity
    networks:
      - llm-cost-tracker

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=llm_metrics
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - llm-cost-tracker

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - llm-cost-tracker

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../config/recording-rules.yml:/etc/prometheus/recording-rules.yml
      - ../config/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - llm-cost-tracker

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ../config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ../dashboards:/var/lib/grafana/dashboards
    networks:
      - llm-cost-tracker

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - llm-cost-tracker

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    restart: unless-stopped
    ports:
      - "8080:8080"   # Health check
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    volumes:
      - ../config/otel-collector.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    depends_on:
      - jaeger
      - prometheus
    networks:
      - llm-cost-tracker

volumes:
  poetry-cache:
  node-modules:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  llm-cost-tracker:
    driver: bridge