groups:
- name: llm_cost_alerts
  rules:
  # Cost threshold alerts
  - alert: HighDailyCost
    expr: increase(llm_cost_tracker_total_cost_usd[1d]) > 100
    for: 5m
    labels:
      severity: warning
      team: "ml-ops"
    annotations:
      summary: "High daily LLM cost detected"
      description: "Daily LLM costs have exceeded $100. Current increase: ${{ $value | printf \"%.2f\" }}"
      runbook_url: "https://runbooks.terragonlabs.com/llm-cost-alerts"
      action: "Review high-cost applications and consider model optimization"

  - alert: CriticalDailyCost
    expr: increase(llm_cost_tracker_total_cost_usd[1d]) > 500
    for: 2m
    labels:
      severity: critical
      team: "ml-ops"
    annotations:
      summary: "CRITICAL: Daily LLM costs exceeded $500"
      description: "Immediate attention required! Daily costs: ${{ $value | printf \"%.2f\" }}"
      runbook_url: "https://runbooks.terragonlabs.com/llm-cost-emergency"
      action: "Immediately review and implement cost controls or circuit breakers"

  - alert: BudgetThresholdWarning
    expr: (llm_cost_tracker_budget_usage_ratio * 100) > 70
    for: 5m
    labels:
      severity: warning
      team: "ml-ops"
    annotations:
      summary: "Budget threshold warning"
      description: "Budget usage is at {{ $value | printf \"%.1f\" }}% for application {{ $labels.application }}"
      action: "Review application usage patterns and consider optimization"

  - alert: BudgetThresholdExceeded
    expr: (llm_cost_tracker_budget_usage_ratio * 100) > 90
    for: 2m
    labels:
      severity: critical
      team: "ml-ops"
    annotations:
      summary: "Budget threshold critically exceeded"
      description: "Budget usage is at {{ $value | printf \"%.1f\" }}% for application {{ $labels.application }}"
      runbook_url: "https://runbooks.terragonlabs.com/budget-exceeded"
      action: "Enable automatic model switching or implement throttling"

  # Model-specific cost alerts
  - alert: ExpensiveModelOveruse
    expr: increase(llm_cost_tracker_cost_by_model{model=~"gpt-4.*|claude-3-opus.*"}[1h]) > 50
    for: 10m
    labels:
      severity: warning
      team: "ml-ops"
    annotations:
      summary: "Expensive model overuse detected"
      description: "Model {{ $labels.model }} cost ${{ $value | printf \"%.2f\" }} in the last hour"
      action: "Consider switching to cost-effective alternative models"

  # Performance and reliability alerts
  - alert: HighLatency
    expr: histogram_quantile(0.95, rate(llm_cost_tracker_request_duration_seconds_bucket[5m])) > 30
    for: 5m
    labels:
      severity: warning
      team: "ml-ops"
    annotations:
      summary: "High LLM request latency"
      description: "95th percentile latency is {{ $value | printf \"%.1f\" }}s for model {{ $labels.model }}"
      action: "Check model performance and consider load balancing"

  - alert: ErrorRateHigh
    expr: rate(llm_cost_tracker_errors_total[5m]) > 0.1
    for: 3m
    labels:
      severity: warning
      team: "ml-ops"
    annotations:
      summary: "High error rate in LLM requests"
      description: "Error rate is {{ $value | printf \"%.3f\" }} errors/sec for application {{ $labels.application }}"
      action: "Check API keys, rate limits, and model availability"

  # Usage pattern alerts
  - alert: UnusualTrafficSpike
    expr: rate(llm_cost_tracker_requests_total[5m]) > (rate(llm_cost_tracker_requests_total[1h]) * 5)
    for: 3m
    labels:
      severity: warning
      team: "ml-ops"
    annotations:
      summary: "Unusual traffic spike detected"
      description: "Request rate is 5x higher than hourly average for application {{ $labels.application }}"
      action: "Investigate potential traffic anomaly or implement rate limiting"

  - alert: ZeroRequestsExtended
    expr: rate(llm_cost_tracker_requests_total[30m]) == 0
    for: 30m
    labels:
      severity: warning
      team: "ml-ops"
    annotations:
      summary: "No LLM requests for extended period"
      description: "No requests received for application {{ $labels.application }} in 30 minutes"
      action: "Check application health and integration status"

# Recording rules for better performance
- name: llm_cost_recording_rules
  interval: 30s
  rules:
  - record: llm_cost_tracker:daily_cost_rate
    expr: increase(llm_cost_tracker_total_cost_usd[1d])
    
  - record: llm_cost_tracker:hourly_cost_rate  
    expr: increase(llm_cost_tracker_total_cost_usd[1h])
    
  - record: llm_cost_tracker:request_rate_5m
    expr: rate(llm_cost_tracker_requests_total[5m])
    
  - record: llm_cost_tracker:error_rate_5m
    expr: rate(llm_cost_tracker_errors_total[5m]) / rate(llm_cost_tracker_requests_total[5m])
    
  - record: llm_cost_tracker:p95_latency_5m
    expr: histogram_quantile(0.95, rate(llm_cost_tracker_request_duration_seconds_bucket[5m]))