# Security Scanning Workflow
# Advanced security scanning and vulnerability assessment

name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [main]
    paths:
      - '.github/workflows/security-scan.yml'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - 'Dockerfile'
      - 'docker-compose*.yml'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Job 1: Code Security Scanning
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: +security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

      - name: Run Bandit Security Scan
        run: |
          poetry run bandit -r src/ -f sarif -o bandit-results.sarif --severity-level medium
        continue-on-error: true

      - name: Upload Bandit results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-results.sarif
          category: bandit

      - name: Run Safety dependency check
        run: |
          poetry run safety check --json --output safety-results.json || true
          
      - name: Convert Safety results to SARIF
        run: |
          pip install safety sarif-om
          python -c "
          import json
          import sarif_om
          from datetime import datetime
          
          try:
              with open('safety-results.json', 'r') as f:
                  safety_data = json.load(f)
              
              sarif_builder = sarif_om.SarifBuilder()
              sarif_builder.create_run('Safety', 'https://pyup.io/safety/', '$(poetry run safety --version)')
              
              for vuln in safety_data:
                  if isinstance(vuln, dict):
                      sarif_builder.create_result(
                          rule_id=vuln.get('id', 'unknown'),
                          message=vuln.get('advisory', 'Security vulnerability detected'),
                          level='error',
                          uri=vuln.get('package_name', 'unknown'),
                          start_line=1,
                          start_column=1
                      )
              
              with open('safety-results.sarif', 'w') as f:
                  json.dump(sarif_builder.sarif, f, indent=2)
          except Exception as e:
              print(f'Error converting Safety results: {e}')
              # Create empty SARIF file
              empty_sarif = {
                  'version': '2.1.0',
                  'runs': [{
                      'tool': {'driver': {'name': 'Safety'}},
                      'results': []
                  }]
              }
              with open('safety-results.sarif', 'w') as f:
                  json.dump(empty_sarif, f)
          "
        continue-on-error: true

      - name: Upload Safety results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: safety-results.sarif
          category: safety

  # Job 2: Secret Scanning
  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json --output trufflehog-results.json

      - name: Upload TruffleHog results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: trufflehog-results
          path: trufflehog-results.json

  # Job 3: Container Security Scanning
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          tags: llm-cost-tracker:security-scan
          outputs: type=docker,dest=/tmp/image.tar

      - name: Load image
        run: docker load -i /tmp/image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: llm-cost-tracker:security-scan
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy

      - name: Run Trivy config scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'

      - name: Upload Trivy config results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-config-results.sarif'
          category: trivy-config

      - name: Run Docker Scout (if available)
        run: |
          if command -v docker-scout &> /dev/null; then
            docker scout cves llm-cost-tracker:security-scan --format sarif --output docker-scout-results.sarif || true
          else
            echo "Docker Scout not available, skipping"
          fi
        continue-on-error: true

  # Job 4: Infrastructure as Code Security
  iac-security:
    name: IaC Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,docker_compose,github_actions,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif
          quiet: true
        continue-on-error: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: checkov

  # Job 5: Dependency Scanning
  dependency-scan:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Generate requirements.txt
        run: poetry export -f requirements.txt --output requirements.txt --dev

      - name: Run OSV Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            -r
            --format=sarif
            --output=osv-results.sarif
            .
        continue-on-error: true

      - name: Upload OSV results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: osv-results.sarif
          category: osv-scanner

  # Job 6: Security Report Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [code-security, secret-scanning, container-security, iac-security, dependency-scan]
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        continue-on-error: true

      - name: Generate security summary
        run: |
          echo "# 🔐 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Job Results" >> security-summary.md
          echo "| Job | Status |" >> security-summary.md
          echo "|-----|--------|" >> security-summary.md
          echo "| Code Security | ${{ needs.code-security.result }} |" >> security-summary.md
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |" >> security-summary.md
          echo "| Container Security | ${{ needs.container-security.result }} |" >> security-summary.md
          echo "| IaC Security | ${{ needs.iac-security.result }} |" >> security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check for critical issues
          CRITICAL_ISSUES=false
          if [[ "${{ needs.code-security.result }}" == "failure" ]] || 
             [[ "${{ needs.container-security.result }}" == "failure" ]] || 
             [[ "${{ needs.dependency-scan.result }}" == "failure" ]]; then
            CRITICAL_ISSUES=true
          fi
          
          if [ "$CRITICAL_ISSUES" = true ]; then
            echo "## ⚠️ Critical Security Issues Detected" >> security-summary.md
            echo "Please review the security findings in the GitHub Security tab." >> security-summary.md
          else
            echo "## ✅ No Critical Security Issues" >> security-summary.md
            echo "All security scans completed successfully." >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security)" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Post security status
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          if [ -f security-summary.md ]; then
            echo "Security scan completed. Check artifacts for detailed results."
            cat security-summary.md
          fi