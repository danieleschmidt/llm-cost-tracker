name: Security Scanning & SBOM

on:
  push:
    branches: [ main, terragon/* ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly Monday 6 AM

permissions:
  contents: read
  security-events: write
  id-token: write  # For Cosign keyless signing

jobs:
  codeql:
    name: CodeQL SAST Analysis
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      
    - name: Cache NVD Database
      uses: actions/cache@v3
      with:
        path: ~/.gradle/dependency-check-data
        key: dependency-check-nvd-${{ github.run_number }}
        restore-keys: dependency-check-nvd-
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'llm-cost-tracker'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
          --suppression dependency-check-suppressions.xml
          
    - name: Upload Results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate SBOM
      uses: cyclonedx/github-action@v1
      with:
        version: v1.17.0
        
    - name: Create docs/sbom directory
      run: mkdir -p docs/sbom
      
    - name: Move SBOM to docs directory
      run: |
        mv bom.json docs/sbom/latest.json
        cp docs/sbom/latest.json docs/sbom/$(date +%Y-%m-%d).json
        
    - name: Upload SBOM artifact
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: docs/sbom/
        
    - name: Commit SBOM updates
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/sbom/
        git diff --staged --quiet || git commit -m "Update SBOM [skip ci]"
        git push

  sbom-diff-check:
    name: SBOM Vulnerability Diff
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Get previous SBOM
      run: |
        git checkout HEAD~1 -- docs/sbom/latest.json || echo "No previous SBOM found"
        mv docs/sbom/latest.json docs/sbom/previous.json || echo "No previous SBOM"
        git checkout HEAD -- docs/sbom/latest.json
        
    - name: Install CycloneDX CLI
      run: |
        npm install -g @cyclonedx/cyclonedx-cli
        
    - name: Diff SBOMs
      run: |
        if [ -f docs/sbom/previous.json ]; then
          cyclonedx diff docs/sbom/previous.json docs/sbom/latest.json > sbom-diff.txt || true
          
          # Check for critical vulnerabilities
          if grep -i "critical\|high" sbom-diff.txt; then
            echo "::error::Critical vulnerabilities found in SBOM diff"
            cat sbom-diff.txt
            exit 1
          fi
        fi

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t llm-cost-tracker:${{ github.sha }} .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'llm-cost-tracker:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Install Cosign
      if: github.ref == 'refs/heads/main'
      uses: sigstore/cosign-installer@v3
      
    - name: Sign container image
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag llm-cost-tracker:${{ github.sha }} ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker push ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        cosign sign --yes ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified